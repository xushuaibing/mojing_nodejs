#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mojing:server');
var http = require('http');
var mqtt = require('mqtt');
var os = require('os');

var conf = require('../routes/conf');

/**
 * Get port from environment and store in Express.
 */

var port = conf.MainService.port;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
const io = require('socket.io')(server);
var pageMessage ;
let a = Date.now()
//连接mqtt
var client  = mqtt.connect('mqtt://'+conf.Mqtt.service+':'+conf.Mqtt.port+'',{
    username: conf.Mqtt.user,
        password: conf.Mqtt.password,
        clientId: a});

client.on('connect', function () {
  console.log("连接mqtt服务器");
  client.subscribe(conf.Mqtt.tipc);  
});


io.on('connection', socket => {
  //监听mqtt
  client.on('message', function (topic, message) {
     if(topic == conf.Mqtt.tipc){
        if(message != null){
          message = JSON.parse(message.toString());
          socket.emit('sendToClient', message ); // emit an event to the socket               
        }     
      }
  });
  
  io.emit('broadcast', /* … */); // emit an event to all connected sockets
  socket.on('reply', () => { /* … */ }); // listen to the event
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;controls="controls" 
  debug('Listening on ' + bind);
}
